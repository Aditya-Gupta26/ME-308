# # -*- coding: utf-8 -*-
# """ME-308.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/14ZtY3niCk8lLo4FB7EgQ6WbFPVRmSHup

# # New Section
# """

# # pip install -q amplpy
# # pip install googlemaps
# # Google Colab & Kaggle integration

# from amplpy import AMPL, tools
# import numpy
# # ampl = tools.ampl_notebook(
# #     modules=["coin", "highs","cplex", "gokestrel"], # modules to install
# #     license_uuid="default", # license to use
# #     g=globals()) # instantiate AMPL object and register magics

# # %%ampl_eval
# # reset;
# # param n integer > 0; # N-queens
# # var Row {1..n} integer >= 1 <= n;
# # s.t. row_attacks: alldiff ({j in 1..n} Row[j]);
# # s.t. diag_attacks: alldiff ({j in 1..n} Row[j]+j);
# # s.t. rdiag_attacks: alldiff ({j in 1..n} Row[j]-j);

# # n = 8
# # ampl.param["n"] = n
# # ampl.option["solver"] = "highs"
# # ampl.option["highs_options"] = "outlev=0"
# # ampl.solve()
# # solution = ampl.get_data("Row").to_dict()
# # queens = set((int(r)-1, int(c)-1) for c, r in solution.items())
# # print("Solution")
# # for r in range(n):
# #     print(''.join([' Q ' if (r, c) in queens else ' + ' for c in range(n)]))

# ampl=AMPL()

# #user_input = input("Enter the elements of set INTER, separated by spaces: "
# #int(input("Enter number of locations : "))
# cont=["Ghatkopar Railway Station", "R-City Mall Ghatkopar","Vikhroli Railway Station","IIT Bombay", "Kanjurmarg Railway station",  "Magnet Mall Bhandup", "Bhandup Railway Station", "Nahur Railway Station", "Fortis Mulund","Mulund Railway Station", "Thane railway Station",   "Ashok Cinema Thane"]
# # for k in range(w):
# #   var = input("Enter markers : ")
# #   cont.append(var)
# w = len(cont)

# s = ""
# for k in range(w):
#   s = s + cont[k][:3]+" "
# #user_input2 = input("Enter the elements of set INTER, separated by spaces and commas: ")


# # set the value of the set using the user input

# #ampl.param["time{ROADS}"] = set(user_input2.split())

# # solve the optimization problem


# # print the optimal objective value
# # print('Optimal objective value:', ampl.getObjective('obj').value())

# import googlemaps
# import numpy as np
# #CHANGE DISTANCE HERE AND IN NEXT


# # Requires API key
# gmaps = googlemaps.Client(key='AIzaSyDM2DeThNJY8oJU2W8o3nXDHyINiARgcnk')

# #FOR ROADWAYS
# s2=[]

# for i in range(w):
#   # print(cont[i][:3])
#   s3 = ""
#   for j in range(w):
#     if(i!=j):
#       my_dist = gmaps.distance_matrix(cont[i],cont[j])['rows'][0]['elements'][0]['distance']['text'].split()[0]
      
#       my_dist = str(my_dist)
#       small1 = cont[i][:3]
#       small2 = cont[j][:3]
#       s3 = s3 + small1 + " "+small2+" "+my_dist+","
#       # print(s3)
#   # if(i==w-1):
#   #   s3 = s3.rstrip(s3[-1])
#   #   s3 = s3 + " ;"
#   # else:
#   s3 = s3.rstrip(s3[-1])
#   s2.append(s3)

# #FOR LOCAL
# cont2=["Ghatkopar railway station", "Vikhroli railway station", "Kanjurmarg railway station", "Bhandup railway station", "Nahur railway station", "Mulund railway station", "Thane railway station"]
# dist2=[2,2,1,2,4,2]
# s6 = ""

# w2 = 7
# for i in range(w2):
#   s = s + cont2[i][:3]+"l"+" "
# s4=[]
# s6 = []
# for j in range(w2-1):
#   s5=""
#   s7=""
#   s5 = cont2[j][:3]+"l" + " "+cont2[j+1][:3]+"l"+" "+str(dist2[j])
#   s7 = cont2[j+1][:3]+"l" + " "+cont2[j][:3]+"l"+" "+str(dist2[j])
  
#   s4.append(s5)
#   s6.append(s7)



# # Open the file for writing
# with open("data.dat", "w") as f:
#     # Write some data to the file
#     f.write("param: ROADS: time :=\n")
#     for i in range(w):
#       f.write(s2[i] + "\n")
#       #f.write("b d 40, b e 20\n")
#       #f.write("c d 60, c f 20\n")
#       #f.write("d e 50, d f 60\n")
#       #f.write("e g 70, f g 70 ;")
# with open("data.dat", "a") as f:
#     for i in range(w2-1):
#       f.write(s4[i] + "\n")
#       f.write(s6[i]+"\n")
# #Connecting LOCAL to ROADWAYS
# #using 0.1 waiting time right now

# #ADDING SUITABLE WAITING TIME

# # import time

# # t = time.localtime()
# # current_time = time.strftime("%H:%M:%S", t)
# # print(current_time)
# # print(t)
# # abhi = 0 #tells current time
# # #check up or down from cont
# # flag = True
# # #True = Up
# # #False = Down
# # contains = {}

# # for i in range(w):
# #   if(cont[i][:3]==entry):
# #     if(contains[exit]==1):
# #       flag = False
# #     else:
# #       flag = True
# #     break
# #   else:
# #     contains[cont[i]]=1
# # Timeup = []
# # Timedown = []
# # TimePurse = []
# # if flag:
# #   #for w2 number of local stations
# #   for i in range(w2):
# #     freq = 4 #If frequency of local is 4 minutes
# #     dist = float(gmaps.distance_matrix(entr,cont2[i])['rows'][0]['elements'][0]['distance']['text'].split()[0]) #appropriate conversion to time required
# #     TimePurse[i] = Timeup[i]-abhi-dist
# #     while(TimePurse[i]<5):
# #       TimePurse[i] = TimePurse[i]+freq
  
# #   #use Timeup
# # else:
# #   for i in range(w2):
# #     freq = 4 #If frequency of local is 4 minutes
# #     dist = float(gmaps.distance_matrix(entr,cont2[i])['rows'][0]['elements'][0]['distance']['text'].split()[0]) #appropriate conversion to time required
# #     TimePurse[i] = Timedown[i]-abhi-dist
# #     while(TimePurse[i]<5):
# #       TimePurse[i] = TimePurse[i]+freq
# #   #use Timedown

# with open("data.dat", "a") as f:
#     for i in range(w2):
#       temp = cont2[i][:3]+" "+cont2[i][:3]+"l"+" "+"0";
#       temp2 = cont2[i][:3]+"l"+" "+cont2[i][:3]+" "+"0";
#       f.write( temp+ "\n")
#       if(i==w2-1):
#         f.write(temp2+";"+"\n")
#       else:
#         f.write(temp2+"\n")

# #print(s)
# file = open("output.txt", "w")
# a = file.write(s)
# file.close()
# cont = str(cont)
# file2 = open("output2.txt","w")
# b = file2.write(cont)
# file2.close()
# # arr = numpy.array(s)
# # numpy.savetxt('output.txt',arr)

# -*- coding: utf-8 -*-
"""ME-308.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ZtY3niCk8lLo4FB7EgQ6WbFPVRmSHup

# New Section
"""

# pip install -q amplpy
# pip install googlemaps
# Google Colab & Kaggle integration

from amplpy import AMPL, tools
import numpy
# ampl = tools.ampl_notebook(
#     modules=["coin", "highs","cplex", "gokestrel"], # modules to install
#     license_uuid="default", # license to use
#     g=globals()) # instantiate AMPL object and register magics

# %%ampl_eval
# reset;
# param n integer > 0; # N-queens
# var Row {1..n} integer >= 1 <= n;
# s.t. row_attacks: alldiff ({j in 1..n} Row[j]);
# s.t. diag_attacks: alldiff ({j in 1..n} Row[j]+j);
# s.t. rdiag_attacks: alldiff ({j in 1..n} Row[j]-j);

# n = 8
# ampl.param["n"] = n
# ampl.option["solver"] = "highs"
# ampl.option["highs_options"] = "outlev=0"
# ampl.solve()
# solution = ampl.get_data("Row").to_dict()
# queens = set((int(r)-1, int(c)-1) for c, r in solution.items())
# print("Solution")
# for r in range(n):
#     print(''.join([' Q ' if (r, c) in queens else ' + ' for c in range(n)]))

from amplpy import AMPL,Environment

ampl = AMPL()

#user_input = input("Enter the elements of set INTER, separated by spaces: "
#int(input("Enter number of locations : "))
cont = [ "Ghatkopar railway station", "Suyog Urology Centre", "Rcity mall ghatkopar", "Vikhroli railway station", "Hiranandani Garden", "IIT Bombay", "Kanjurmarg Railway station", "Runwal Forests", "Bhandup railway station", "Nadkarni Eye Care", "Lotus Multispeciality Hospital", "Nahur railway station", "Der Deutsche Park", "Ashford Royale", "Fortis mulund", "PVR Mulund", "Mulund railway station","Umiya Tower", "Lok Everest", "Malhar Cinema", "Thane railway station"]
# for k in range(w):
#   var = input("Enter markers : ")
#   cont.append(var)
w = len(cont)

s = ""
for k in range(w):
  s = s + cont[k][:3]+" "
#user_input2 = input("Enter the elements of set INTER, separated by spaces and commas: ")


# set the value of the set using the user input

#ampl.param["time{ROADS}"] = set(user_input2.split())

# solve the optimization problem


# print the optimal objective value
# print('Optimal objective value:', ampl.getObjective('obj').value())

import googlemaps
import numpy as np
#CHANGE DISTANCE HERE AND IN NEXT


# Requires API key
gmaps = googlemaps.Client(key='AIzaSyDM2DeThNJY8oJU2W8o3nXDHyINiARgcnk')

#FOR ROADWAYS
s2=[]

for i in range(w):
  # print(cont[i][:3])
  s3 = ""
  for j in range(w):
    if(i!=j):
      my_dist = gmaps.distance_matrix(cont[i],cont[j])['rows'][0]['elements'][0]['distance']['text'].split()[0]
      
      my_dist = str(my_dist)
      #my_dist=my_dist + my_dist*/40
      small1 = cont[i][:3]
      small2 = cont[j][:3]
      s3 = s3 + small1 + " "+small2+" "+my_dist+","
      # print(s3)
  # if(i==w-1):
  #   s3 = s3.rstrip(s3[-1])
  #   s3 = s3 + " ;"
  # else:
  s3 = s3.rstrip(s3[-1])
  s2.append(s3)

#FOR LOCAL
cont2=["Ghatkopar railway station", "Vikhroli railway station", "Kanjurmarg railway station", "Bhandup railway station", "Nahur railway station", "Mulund railway station", "Thane railway station"]
dist2=[2,2,1,2,4,2]
s6 = ""

w2 = 7
for i in range(w2):
  s = s + cont2[i][:3]+"l"+" "
s4=[]
s6 = []
for j in range(w2-1):
  s5=""
  s7=""
  s5 = cont2[j][:3]+"l" + " "+cont2[j+1][:3]+"l"+" "+str(dist2[j])
  s7 = cont2[j+1][:3]+"l" + " "+cont2[j][:3]+"l"+" "+str(dist2[j])
  
  s4.append(s5)
  s6.append(s7)


#FOR BUSES DEFINE ALL NODES AND EDGES (WEIGHTS) AND ADD TO S WITH NAME CONVENTION,  DEFINE 2 ROUTES, FINALLY OBTAIN TWO LISTS (UP AND DOWN) WITH ELEMENTS OF THE FORM "LOCA LOCB DISA2B"


cont3=["Ghatkopar railway station", "Rcity mall ghatkopar","Vikhroli railway station", "IIT Bombay", "Kanjurmarg Railway station", "Bhandup railway station", "Nahur railway station", "Fortis mulund","Mulund railway station", "Thane railway station"]
dist3= [3, 1.7, 3, 1.6, 1.2, 1.5, 1, 4, 2.5]
s10 = ""

w3 = len(cont3)
for i in range(w3):
  s = s + cont3[i][:3]+"b"+" "

s8=[]
s10 = []

cont4 = ["Ghatkopar railway station", "Rcity mall ghatkopar","Vikhroli railway station","IIT Bombay", "Kanjurmarg Railway station"]
w4 = len(cont4)
dist4 = [3, 1.7, 3, 1.6]
for j in range(w4-1):
  s9=""
  s11=""
  s9 = cont4[j][:3]+"b" + " "+cont4[j+1][:3]+"b"+" "+str(dist4[j])
  s11 = cont4[j+1][:3]+"b" + " "+cont4[j][:3]+"b"+" "+str(dist4[j])
  
  s8.append(s9)
  s10.append(s11)

cont4 = ["Bhandup railway station", "Nahur railway station", "Fortis mulund", "Mulund railway station", "Thane railway station"]
w4 = len(cont4)
dist4 = [ 1.5, 1, 4, 2.5]
for j in range(w4-1):
  s9=""
  s11=""
  s9 = cont4[j][:3]+"b" + " "+cont4[j+1][:3]+"b"+" "+str(dist4[j])
  s11 = cont4[j+1][:3]+"b" + " "+cont4[j][:3]+"b"+" "+str(dist4[j])
  
  s8.append(s9)
  s10.append(s11)



# MAKING THE DAT FILE

#ADDING ALL AUTO NODES

with open("data.dat", "w") as f:
    # Write some data to the file
    f.write("param: ROADS: time :=\n")
    for i in range(w):
      f.write(s2[i] + "\n")

#ADDING ALL LOCAL UP AND DOWN ROUTES WITH WEIGHTS
with open("data.dat", "a") as f:
    for i in range(w2-1):
      f.write(s4[i] + "\n")
      f.write(s6[i]+"\n")

#ADDING ALL BUS UP AND DOWN ROUTES WITH WEIGHTS
with open("data.dat", "a") as f:
    for i in range(len(s8)-1):
      f.write(s8[i] + "\n")
      f.write(s10[i]+"\n")

#Connecting LOCAL-BUS, LOCAL-AUTO, BUS-AUTO nodes
with open("data.dat", "a") as f:
    for i in range(w2):
      temp = cont2[i][:3]+"l"+ " "+cont2[i][:3]+"b"+" "+"0";
      temp2 = cont2[i][:3]+"b"+" "+cont2[i][:3]+"l"+" "+"0";
      f.write( temp+ "\n")
      f.write(temp2+"\n")
      temp = cont2[i][:3]+"l"+ " "+cont2[i][:3]+" "+"0";
      temp2 = cont2[i][:3]+" "+cont2[i][:3]+"l"+" "+"0";
      f.write( temp+ "\n")
      f.write(temp2+"\n")
      temp = cont3[i][:3]+"b"+ " "+cont3[i][:3]+" "+"0";
      temp2 = cont3[i][:3]+" "+cont3[i][:3]+"b"+" "+"0";
      f.write( temp+ "\n")
      f.write(temp2+"\n")





#using 0.1 waiting time right now

#ADDING SUITABLE WAITING TIME

# import time

# t = time.localtime()
# current_time = time.strftime("%H:%M:%S", t)
# print(current_time)
# print(t)
# abhi = 0 #tells current time
# #check up or down from cont
# flag = True
# #True = Up
# #False = Down
# contains = {}

# for i in range(w):
#   if(cont[i][:3]==entry):
#     if(contains[exit]==1):
#       flag = False
#     else:
#       flag = True
#     break
#   else:
#     contains[cont[i]]=1
# Timeup = []
# Timedown = []
# TimePurse = []
# if flag:
#   #for w2 number of local stations
#   for i in range(w2):
#     freq = 4 #If frequency of local is 4 minutes
#     dist = float(gmaps.distance_matrix(entr,cont2[i])['rows'][0]['elements'][0]['distance']['text'].split()[0]) #appropriate conversion to time required
#     TimePurse[i] = Timeup[i]-abhi-dist
#     while(TimePurse[i]<5):
#       TimePurse[i] = TimePurse[i]+freq
  
#   #use Timeup
# else:
#   for i in range(w2):
#     freq = 4 #If frequency of local is 4 minutes
#     dist = float(gmaps.distance_matrix(entr,cont2[i])['rows'][0]['elements'][0]['distance']['text'].split()[0]) #appropriate conversion to time required
#     TimePurse[i] = Timedown[i]-abhi-dist
#     while(TimePurse[i]<5):
#       TimePurse[i] = TimePurse[i]+freq
#   #use Timedown



#print(s)
file = open("output.txt", "w")
a = file.write(s)
file.close()
cont = str(cont)
file2 = open("output2.txt","w")
b = file2.write(cont)
file2.close()
# arr = numpy.array(s)
# numpy.savetxt('output.txt',arr)
print(s)